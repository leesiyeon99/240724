추상클래스와 인터페이스 차이(각각의 장단점 및 사용처)

추상클래스란 abstract 키워드를 사용하면 상속 받는 클래스에서 공통적으로 구현해야 하는 클래스나 멤버를 만들 수 있다. 따라서 자식클래스에 공통적인 정의를 제공한다고 할 수 있다. 추상클래스는 인스턴스화 할 수 없으며 추상클래스에서는 추상 메서드를 정의 할 수 있다. 추상 메서드는 추상 클래스와 마찬가지로 abstract키워드를 사용하여 상속받은 클래스에서 override 키워드를 사용하여 함수를 재정의한다고 할 수 있다.

인터페이스란 클래스와 비슷하게 매서드, 속성, 이벤트 등을 갖지만 이를 직접 구현하지 않고 단지 정의만을 갖는 것이다. 추상 메서드를 가진 추상 클래스와 개념이 비슷하다. 
인터페이스는 접근 제한자를 사용하지 않고 interface 키워드를 사용하여 정의한다.  따라서 인터페이스의 멤버인 경우 public으로 접근권한이 기본으로 설정된다.

추상클래스는 클래스이기 때문에 다중으로 상속이 불가능하지만 인터페이스의 경우 하나의 클래스가 여러 인터페이스를 가질 수 있고 가지고 있는 인터페이스의 모든 멤버에 대한 구현이 필요하다. 

이러한 개념으로 추상클래스는 다중으로 상속이 불가능한 단점이 있지만 원하는 멤버만 override하여 자식객체가  부모클래스의 특징을 가지지만 원하는 부분만 수정을 해줄 수 있다는 장점이 있다.

반대로 인터페이스는 자식클래스가 여러개의 인터페이스를 가질 수 있어 그에 맞는 구현이 가능하다. 하지만 인터페이스를 반드시 구현해야 하는 강제성이 있기 때문에 자식클래스가 행동 할 수 있는 인터페이스를 사용해야 한다.

추상클래스의 경우 '자식클래스이름' 는(은) '부모클래스이름' 가 맞다 라는 문장이 성립할 때 사용하면 좋고
인터페이스의 경우 '자식클래스이름' 는(은) '부모클래스이름' 할 수 있다 라는 문장이 성립할 때 사용하면 좋다. 

예를 들어 class animal 이라는 상위 클래스가 있고 tiger이라는 자식 클래스가 있다고 할 때 tiger는 animal이다 라는 문장이 성립하기 때문에 추상클래스를 사용하는 것이 좋고
class enter()이라는 클래스가 있고 class door()라는 클래스가 있을 때 door는 enter 할 수 있다 라는 문장이 성립되므로 인터페이스를 사용하는 것이 좋다고 할 수 있다.