1. 제네릭은 어디에 왜 사용하는가
제네릭이란 자료형의 형식을 지정하지 않고 함수를 정의하는 것을 말한다. 특정 타입에 국한되지 않고 모든 타입을 멤버변수의 타입으로 설정할 수 있다. 그래서 제네릭 클래스는 멤버 변수의 데이터 타입 때문에 여러 개의 클래스를 작성해야 하는 경우 한 개의 클래스로 구현할 때 사용한다.

2. 사용시 어떤 이점을 제공하는가
불필요한 클래스 구현을 방지할 수 있으며 컴파일 시간에 타입을 검사하여 타입 오류를 방지할 수 있다. 제네릭 클래스와 메서드는 다양한 타입에 대해 동일한 로직을 사용할 수 있어 코드의 재사용성에 용이하다. 또한 박싱과 언박싱을 피할 수 있어 성능이 향상된다.

3. 제네릭에서 형식 제약 조건은 무엇이며 왜 사용하는가
제네릭은 모든 타입을 허용하는 기법이므로 제네릭클래스의 멤버변수는 값 형식인 int형이 될 수도 있고 참조형식인 string형과 ArrayList 타입도 가능하다. 하지만 제네릭클래스의 멤버변수는 값형식만 가능하도록 구현하도록 제약 조건이 주어질 경우 참조 형식인 string형과 Array타입은 허용되지 않는다
이 때 제약 조건을 구현하기 위해 제네릭 클래스 선언문에 where 조건을 추가 할 수 있다.
class GenericClass <T> where T : struct 
여기서 struct는 구조체가 아닌 제네릭에서 값 형식만 허용한다는 제약 조건이다.
이렇게 되면 값 형식이 아닌 다른 타입이 들어오면 컴파일 에러가 발생하기 때문에 형식제약 조건을 사용하면 원하는 타입만 사용할 수 있게 된다.

4. 제네릭과 박싱/언박싱의 관계는 무엇인가
박싱은 스택메모리에 저장되는 값 형식을 object형식으로 감싸 힙 메모리에 저장하는 방식이다. 언박싱은 그와 반대로 참조형식에서 값을 추출해 값 형식으로 변환하는 과정을 말한다. 여기서 object타입이란 .NET언어에서 기본 클래스이자 모든 다른 데이터 형식의 부모 클래스라고 할 수 있다. 따라서 어떤 값이든 object변수에 할당할 수 있다. 
즉, 박싱 단어 그대로 단순히 박스안에 물건을 담아(박싱) 박스는 해당 물건을 담고있고(참조하고 있고), 해당 물건이 그 상자의 가치(타입)을 결정하며, 꺼내어 사용할 때 어떤 물건인지 명시하여 사용하는 것(언박싱)이 박싱과 언박싱이다.
어떤 타입이든 담을 수 있는 배열이나 변수를 만들 때 매우 편리하고 용이할 것 같지만 잘못 사용하면 치명적인 오류를 수반할 수 있고 사용할 때 명시적 타입을 지정해주며 매번 타입캐스팅이 일어나 비용이 매우 큰 편이다. 이러한 박싱/언박싱의 단점을 보완하기 위해 일반화를 사용한다.
제네릭의 타입변환을 하면 박싱과 다르게 런타임이 아닌 컴파일 타임에 타입변환이 이루어지므로 프로그램 성능향상에 도움을 줄 수 있으며 메모리 활용양에서도 이점을 가져올 수 있다.

4-1. 제네릭을 사용시 박싱을 어떻게 줄여주는가
제네릭을 적절히 활용하여 데이터 타입을 명확히 지정하고 값형식을 사용하여 박싱을 피할 수 있다.
